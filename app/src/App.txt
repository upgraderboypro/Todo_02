import { useEffect, useState } from "react";
import "../node_modules/bootstrap/dist/css/bootstrap.css";
import Content from "./componentsList/Content";
import Footer from "./componentsList/footer";
import Header from "./componentsList/header";
import AddItem from "./componentsList/AddItem";
import apiRequest from "./componentsList/ApiRequest";
import SearchItem from "./componentsList/SearchItem";
function App() {
  const API_URL = "http://localhost:1000/items";
  const [search, setSearch] = useState("");
  const [newItem, setNewItem] = useState("");
  const [fetchError, setFetchError] = useState(null);
  const [items, setItems] = useState(
    JSON.parse(localStorage.getItem("list")) || []
  );
  const [isLoading, setIsLoading] = useState(true);
  // const setAndSaveNewItem = (newItem) => {
  //   setItems(newItem);
  //   localStorage.setItem("list", JSON.stringify(newItem));
  // };
  useEffect(() => {
    const fetchItem = async () => {
      try {
        const response = await fetch(API_URL);
        if (!response.ok) throw Error("Server not sending any data to you");
        const listItems = await response.json();
        // console.log(listItems);
        setItems(listItems);
        localStorage.setItem("list", JSON.stringify(listItems));
        setFetchError(null);
      } catch (error) {
        console.log(error.message);
        setFetchError(error.message);
      } finally {
        setIsLoading(false);
      }
    };

    setTimeout(() => (async () => await fetchItem())(), 1000);
  }, []);
  const handleClick = async (id) => {
    console.log(id);
    const listItems = items.map((item) =>
      item.id === id ? { ...item, checked: !item.checked } : item
    );
    setItems(listItems);

    const myItem = listItems.filter((item) => item.id === id);
    const updateOptions = {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ checked: myItem[0].checked }),
    };
    const reqUrl = `${API_URL}/${id}`;
    const result = await apiRequest(reqUrl, updateOptions);
    if (result) setFetchError(result);
  };
  const handleDelete = async (id) => {
    console.log(id);
    const listItems = items.filter((item) => item.id !== id);
    localStorage.setItem("list", JSON.stringify(listItems));
    setItems(listItems);
    const deleteOptions = { method: "DELETE" };
    const reqUrl = `${API_URL}/${id}`;
    const result = await apiRequest(reqUrl, deleteOptions);
    if (result) setFetchError(result);
  };

  const addItem = async (item) => {
    const id = items.length ? items[items.length - 1].id + 1 : 1;
    const myNewItem = { id, checked: false, item };
    // console.log(myNewItem);
    const listItems = [...items, myNewItem];
    // console.log(listItems);
    setItems(listItems);
    localStorage.setItem("list", JSON.stringify(listItems));
    const postOptions = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(myNewItem),
    };
    const result = await apiRequest(API_URL, postOptions);
    if (result) setFetchError(result);
  };
  const submitHandler = (e) => {
    e.preventDefault();
    if (!newItem) return;
    // console.log("Hii Bhuri");
    // console.log(newItem)
    addItem(newItem);
    setNewItem("");
  };

  return (
    <>
      <Header title="List" />
      <div className="main">
        <SearchItem search={search} setSearch={setSearch} />
        <AddItem
          newItem={newItem}
          setNewItem={setNewItem}
          submitHandler={submitHandler}
        />
        {isLoading && <p className="loading">Loading List ðŸ˜Ž</p>}
        {/* {isLoading && <p className={styles.loading}>Loading List ðŸ˜Ž</p>} */}
        {fetchError && <p className="err">{`Error: ${fetchError}`}</p>}
        <Content
          items={items.filter((item) =>
            item.item.toLowerCase().includes(search.toLowerCase())
          )}
          // items={items}
          handleClick={handleClick}
          handleDelete={handleDelete}
        />
        <Footer length={items.length} />
      </div>
    </>
  );
}

export default App;
